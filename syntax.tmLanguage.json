{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Kay",
    "fileTypes": [".kay"],
    "patterns": [
        { "include": "#comment" },
        { "include": "#non_printable_ascii" },
        { "include": "#keyword" },
        { "include": "#character_literal" },
        { "include": "#string_literal" },
        { "include": "#raw_string_literal" },
        { "include": "#integer_literal" },
        { "include": "#variable" },
        { "include": "#type_annotation" }
    ],
    "repository": {
        "comment": {
            "patterns": [
                {
                    "name": "invalid.illegal.unopened_multiline_comment.kay",
                    "match": "#\\}"
                },
                {
                    "name": "comment.block.kay",
                    "begin": "#\\{",
                    "end": "#\\}"
                },
                {
                    "name": "comment.line.number-sign.kay",
                    "begin": "#",
                    "end": "\\n"
                }
            ]
        },

        "non_printable_ascii": {
            "name": "invalid.illegal.non_printable_ascii.kay",
            "match": "[^\\x00-\\x7f]{1,4}"
        },

        "keyword": {
            "patterns": [
                {
                    "name": "keyword.control.kay",
                    "match": "\\b(?:do|if|else|loop|break|continue)\\b"
                },
                {
                    "name": "keyword.operator.new.kay",
                    "match": "\\b(?:len)\\b"
                },
                {
                    "name": "storage.modifier.kay",
                    "match": "\\b(?:let|var)\\b"
                },
                {
                    "name": "constant.language.boolean.kay",
                    "match": "\\b(?:true|false)\\b"
                },
                {
                    "name": "support.function.kay",
                    "match": "\\b(?:print|println|eprint|eprintln)\\b"
                }
            ]
        },

        "escapes": {
            "patterns": [
                {
                    "name": "constant.character.escape.kay",
                    "match": "(?:\\\\{2}|\\\\'|\\\\\"|\\\\n|\\\\r|\\\\t|\\\\0)"
                },
                {
                    "name": "invalid.illegal.escape.kay",
                    "match": "(?:\\\\.)"
                }
            ]
        },
        "raw_string_escapes": {
            "patterns": [
                {
                    "name": "constant.character.escape.kay",
                    "match": "(?:\\\\\")"
                }
            ]
        },
        "character_literal": {
            "patterns": [
                {
                    "name": "string.quoted.single.kay invalid.illegal.empty.kay",
                    "match": "''"
                },
                {
                    "name": "string.quoted.single.kay invalid.illegal.long.kay",
                    "match": "'((?:\\\\.|[^'\\\\]){2,})'",
                    "captures": {
                        "1": {
                            "patterns": [
                                { "include": "#escapes" },
                                { "include": "#non_printable_ascii" }
                            ]
                        }
                    }
                },
                {
                    "name": "string.quoted.single.kay",
                    "match": "'((?:\\\\.|[^'\\\\]))'",
                    "captures": {
                        "1": {
                            "patterns": [
                                { "include": "#escapes" },
                                { "include": "#non_printable_ascii" }
                            ]
                        }
                    }
                },
                {
                    "name": "string.quoted.single.kay invalid.illegal.unclosed.kay",
                    "match": "'((?:\\\\.|[^'\\\\])*)",
                    "captures": {
                        "1": {
                            "patterns": [
                                { "include": "#escapes" },
                                { "include": "#non_printable_ascii" }
                            ]
                        }
                    }
                }
            ]
        },
        "string_literal": {
            "patterns": [
                {
                    "name": "string.quoted.double.kay",
                    "match": "\"((?:\\\\.|[^\"\\\\])*)\"",
                    "captures": {
                        "1": {
                            "patterns": [
                                { "include": "#escapes" },
                                { "include": "#non_printable_ascii" }
                            ]
                        }
                    }
                },
                {
                    "name": "string.quoted.double.kay invalid.illegal.unclosed.kay",
                    "match": "\"((?:\\\\.|[^\"\\\\])*)",
                    "captures": {
                        "1": {
                            "patterns": [
                                { "include": "#escapes" },
                                { "include": "#non_printable_ascii" }
                            ]
                        }
                    }
                }
            ]
        },
        "raw_string_literal": {
            "patterns": [
                {
                    "name": "string.quoted.double.raw.kay",
                    "match": "(r)\"((?:\\\\(?=[^\"])|\\\\\"|[^\"\\\\])*)\"",
                    "captures": {
                        "1": {
                            "name": "markup.changed.prefix.kay"
                        },
                        "2": {
                            "patterns": [
                                { "include": "#raw_string_escapes" },
                                { "include": "#non_printable_ascii" }
                            ]
                        }
                    }
                },
                {
                    "name": "string.quoted.double.raw.kay invalid.illegal.unclosed.kay",
                    "match": "(r)\"((?:\\\\(?=[^\"])|\\\\\"|[^\"\\\\])*)",
                    "captures": {
                        "1": {
                            "name": "markup.changed.prefix.kay"
                        },
                        "2": {
                            "patterns": [
                                { "include": "#raw_string_escapes" },
                                { "include": "#non_printable_ascii" }
                            ]
                        }
                    }
                }
            ]
        },

        "integer_literal": {
            "patterns": [
                {
                    "name": "constant.numeric.integer.binary.kay",
                    "match": "(0(b))((?:[A-Za-z\\d_]|[^\\x00-\\x7f]{1,4})+)",
                    "captures": {
                        "1": {
                            "name": "constant.numeric.integer.prefix.kay"
                        },
                        "2": {
                            "name": "markup.changed.base.kay"
                        },
                        "3": {
                            "patterns": [
                                {
                                    "name": "invalid.illegal.digit.kay",
                                    "match": "[2-9]"
                                },
                                {
                                    "name": "invalid.illegal.letter.kay",
                                    "match": "[A-Za-z]"
                                },
                                { "include": "#non_printable_ascii" }
                            ]
                        }
                    }
                },
                {
                    "name": "constant.numeric.integer.octal.kay",
                    "match": "(0(o))((?:[A-Za-z\\d_]|[^\\x00-\\x7f]{1,4})+)",
                    "captures": {
                        "1": {
                            "name": "constant.numeric.integer.prefix.kay"
                        },
                        "2": {
                            "name": "markup.changed.base.kay"
                        },
                        "3": {
                            "patterns": [
                                {
                                    "name": "invalid.illegal.digit.kay",
                                    "match": "[8-9]"
                                },
                                {
                                    "name": "invalid.illegal.letter.kay",
                                    "match": "[A-Za-z]"
                                },
                                { "include": "#non_printable_ascii" }
                            ]
                        }
                    }
                },
                {
                    "name": "constant.numeric.integer.hexadecimal.kay",
                    "match": "(0(x))((?:[A-Za-z\\d_]|[^\\x00-\\x7f]{1,4})+)",
                    "captures": {
                        "1": {
                            "name": "constant.numeric.integer.prefix.kay"
                        },
                        "2": {
                            "name": "markup.changed.base.kay"
                        },
                        "3": {
                            "patterns": [
                                {
                                    "name": "invalid.illegal.digit.kay",
                                    "match": "[G-Zg-z]"
                                },
                                { "include": "#non_printable_ascii" }
                            ]
                        }
                    }
                },
                {
                    "name": "invalid.illegal.empty_binary.kay",
                    "match": "(0(b))"
                },
                {
                    "name": "invalid.illegal.empty_octal.kay",
                    "match": "(0(o))"
                },
                {
                    "name": "invalid.illegal.empty_hexadecimal.kay",
                    "match": "(0(x))"
                },
                {
                    "name": "constant.numeric.integer.decimal.kay",
                    "match": "(\\d(?:[A-Za-z\\d_]|[^\\x00-\\x7f]{1,4})*)",
                    "captures": {
                        "1": {
                            "patterns": [
                                {
                                    "name": "invalid.illegal.letter.kay",
                                    "match": "[A-Za-z]"
                                },
                                { "include": "#non_printable_ascii" }
                            ]
                        }
                    }
                }
            ]
        },

        "long_identifier": {
            "name": "invalid.illegal.long.kay",
            "match": "([A-Za-z_](?:[A-Za-z\\d_]|[^\\x00-\\x7f]{1,4}){63,})",
            "captures": {
                "1": {
                    "patterns": [
                        { "include": "#non_printable_ascii" }
                    ]
                }
            }
        },
        "variable_name": {
            "name": "variable.name.kay",
            "match": "([A-Za-z_](?:[A-Za-z\\d_]|[^\\x00-\\x7f]{1,4}){0,62})",
            "captures": {
                "1": {
                    "patterns": [
                        { "include": "#non_printable_ascii" }
                    ]
                }
            }
        },
        "type_name": {
            "name": "support.type.kay",
            "match": "([A-Za-z_](?:[A-Za-z\\d_]|[^\\x00-\\x7f]{1,4}){0,62})",
            "captures": {
                "1": {
                    "patterns": [
                        { "include": "#non_printable_ascii" }
                    ]
                }
            }
        },
        "variable": {
            "patterns": [
                { "include": "#long_identifier" },
                { "include": "#variable_name" }
            ]
        },
        "type_annotation": {
            "name": "meta.type.annotation.kay",
            "match": ": *?([A-Za-z_](?:[A-Za-z\\d_]|[^\\x00-\\x7f]{1,4})*)(\\[.*?\\])?",
            "captures": {
                "1": {
                    "patterns": [
                        { "include": "#long_identifier" },
                        { "include": "#type_name" }
                    ]
                },
                "2": {
                    "patterns": [
                        { "include": "#comment" },
                        { "include": "#non_printable_ascii" },
                        { "include": "#keyword" },
                        { "include": "#character_literal" },
                        { "include": "#string_literal" },
                        { "include": "#raw_string_literal" },
                        { "include": "#integer_literal" },
                        { "include": "#variable" }
                    ]
                }
            }
        }
    },
    "scopeName": "source.kay"
}
